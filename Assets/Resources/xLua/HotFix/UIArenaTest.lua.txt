-- by wsh for test @ 2017-09-07
-- 说明：xlua热更示例

-- 说明：lua库
local util = require 'common.util'
local helper = require 'common.helper'
local messenger = require 'common.messenger'

-- 说明，用局部缓存可以提高函数访问效率,还能提高代码可读性
local Vector3 = CS.UnityEngine.Vector3
local Button = CS.UnityEngine.GUI.Button
local Rect = CS.UnityEngine.Rect

xlua.private_accessible(CS.UIArena)
xlua.private_accessible(CS.BaseUI)

-- hotfix热更示例
util.hotfix_ex(CS.UIArena, 'Open', function(self, param, pathData)
-- xlua.hotfix(CS.UIArena, 'Open', function(self, param, pathData)
	print('HOTFIX:Open', param, pathData)--新增的热更逻辑
	self:Open(param, pathData)--cs侧的旧代码逻辑，注意，这样调用必须使用util.hotfix_ex热更，否则使用xlua.hotfix会死循环
end)

-- Lua消息响应、Lua创建和遍历泛型列表、字典示例
local TestLuaCallback = function(self, param)
	print('LuaDelegateTest: ', self, param, param and param.rank)
	local testList = helper.new_list(typeof(CS.System.String))
	testList:Add('111')
	testList:Add('222')
	testList:Add('333')
	print('testList', testList, testList.Count, testList[testList.Count - 1])
	
	-- 注意:循环区间为闭区间[0,testList.Count - 1]
	-- 适用于列表子集（子区间）遍历
	for i = 0, testList.Count - 1 do
		print('testList', i, testList[i])
	end
	
	-- 说明：工作方式与上述遍历一样，使用方式上雷同lua库的ipairs，类比于cs的foreach
	-- 适用于列表全集（整区间）遍历，推荐，很方便
	-- 注意：同cs的foreach，遍历函数体不能修改i,v，否则结果不可预料
	for i, v in helper.list_ipairs(testList) do
		print('testList', i, v)
	end
end

local TestLuaCallback2 = function(self, param)
	print('LuaDelegateTest: ', self, param, param and param.Count)
	local testDic = helper.new_dictionary(typeof(CS.System.Int32), typeof(CS.System.String))
	testDic:Add(111, 'aaa')
	testDic[222] = 'bbb'
	testDic[333] = 'ccc'
	print('testDic1', testDic, testDic.Count, testDic[333])--正确，注意：只有key为number类型才能够使用[]
	print('testDic2', testDic, testDic.Count, helper.try_get_value(testDic, 333))--正确，推荐，方式统一，不容易犯错
	
	testDic = helper.new_dictionary(typeof(CS.System.String), typeof(CS.System.Int32))
	testDic:Add('aaa', 111)
	testDic['bbbb'] = 222
	testDic['ccc'] = 333
	print('testDic3', testDic, testDic.Count, testDic['ccc'])--错误
	print('testDic4', testDic, testDic.Count, helper.try_get_value(testDic, 'ccc'))--正确
	
	-- 说明：同helper.list_ipairs
	for i, v in helper.dictionary_ipairs(testDic) do
		print('testDic', i, v)
	end
end

-- 添加消息示例
xlua.hotfix(CS.UIArena, 'AddListener', function(self)
	print('HOTFIX:AddListener---------------------------------------')
	-- 调用基类实现
	self:UIArena_BaseAddListener()
	---------------------------------消息系统热更测试---------------------------------
	-- 用法一：使用cs侧函数作为回调，必须在XLuaMessenger导出，无法新增消息监听，不支持重载函数
	messenger.add_listener(CS.MessageName.MN_ARENA_PERSONAL_PANEL, self, self.UpdatePanelInfo)
	messenger.add_listener(CS.MessageName.MN_RESET_RIVAL, self, self.UpdateRivalInfo)
	
	-- 用法二：使用lua函数作为回调，必须在XLuaMessenger导出，可以新增任意已导出的消息监听
	messenger.add_listener(CS.MessageName.MN_ARENA_PERSONAL_PANEL, self, TestLuaCallback)
	messenger.add_listener(CS.MessageName.MN_RESET_RIVAL, self, TestLuaCallback2)
	
	-- 用法三：使用CS侧成员委托，无须在XLuaMessenger导出，可以新增同类型的消息监听，CS侧必须缓存委托
	messenger.add_listener(CS.MessageName.MN_ARENA_UPDATE, self.updateLeftTimes)
	
	-- 用法四：使用反射创建委托，无须在XLuaMessenger导出，CS侧无须缓存委托，灵活度高，效率低，支持重载函数
	-- 注意：如果该消息在CS代码中没有使用过，则最好打[ReflectionUse]标签，防止IOS代码裁剪
	messenger.add_listener(CS.MessageName.MN_ARENA_BOX, self, 'SetBoxState', typeof(CS.System.Int32))
	messenger.add_listener(CS.MessageName.MN_ARENA_CLEARDATA, self, 'ClearData')
end)

-- 移除消息示例
xlua.hotfix(CS.UIArena, 'RemoveListener', function(self)
	print('HOTFIX:RemoveListener---------------------------------------')
	-- 调用基类实现
	self:UIArena_BaseRemoveListener()
	-- 用法一
	messenger.remove_listener(CS.MessageName.MN_ARENA_PERSONAL_PANEL, self, self.UpdatePanelInfo)
	messenger.remove_listener(CS.MessageName.MN_RESET_RIVAL, self, self.UpdateRivalInfo)
	
	-- 用法二
	messenger.remove_listener(CS.MessageName.MN_ARENA_PERSONAL_PANEL, self, TestLuaCallback)
	messenger.remove_listener(CS.MessageName.MN_RESET_RIVAL, self, TestLuaCallback2)
	
	-- 用法三
	messenger.remove_listener(CS.MessageName.MN_ARENA_UPDATE, self.updateLeftTimes)
	
	-- 用法四
	messenger.remove_listener(CS.MessageName.MN_ARENA_BOX, self, 'SetBoxState', typeof(CS.System.Int32))
	messenger.remove_listener(CS.MessageName.MN_ARENA_CLEARDATA, self, 'ClearData')
end)

-- 消息热更示例
xlua.hotfix(CS.UIArena, 'UpdatePanelInfo', function(self, panelData)
	print('HOTFIX:UpdatePanelInfo ', self, panelData, panelData and panelData.rank)
	if panelData == nil or panelData.awardList == nil then
		do return end
	end
	
	self.m_panelData = panelData
	self:UpdateReddot()
	
    self.m_winTimesLbl.text = tostring(panelData.winTimes)
    self.m_leftTimesLbl.text = tostring(panelData.timesLimit - panelData.todayChallengeTimes)
    local maxNum = panelData.awardList[panelData.awardList.Count - 1].openCondition
    local rate = panelData.todayChallengeTimes * 1.0 / maxNum
    local barLength = self.m_barBgSpt.width * (rate > 1 and 1 or rate)
    if barLength == 0 then
        self.m_barSpt.gameObject:SetActive(false)
    else
        self.m_barSpt.gameObject:SetActive(true)
        self.m_barSpt.width = barLength
    end

    self:ShowRankValueType(panelData.rank);

    if self.m_userIconItem ~= nil then
		self.m_userIconItem:SetIcon(CS.Player.instance.UserMgr.userData.icon)
	end
		
    self:UpdateBoxState(panelData.awardList, panelData)
    self:UpdateDailyAwardItem(panelData.dailyItemList)
    self:UpdateRivalInfo(panelData.rivalList)
    self:Invoke("RefreshPanel", 0.1)
end)

--[[
-- 发送消息示例
util.hotfix_ex(CS.UIArena, 'OnGUI', function(self)
--xlua.hotfix(CS.UIArena, 'OnGUI', function(self)
	if Button(Rect(100, 300, 150, 80), 'lua BroadcastMsg1') then
		local testData = CS.ArenaPanelData()--正确
		--local testData = helper.new_object(typeof(CS.ArenaPanelData))--正确
        testData.rank = 7777;
		messenger.broadcast(CS.MessageName.MN_ARENA_PERSONAL_PANEL, testData)
	end
	
	if Button(Rect(100, 400, 150, 80), 'lua BroadcastMsg2') then
		local testData = helper.new_list(typeof(CS.ArenaRivalData))
		for i = 0, 22 do
			testData:Add(CS.ArenaRivalData())
		end
		messenger.broadcast(CS.MessageName.MN_RESET_RIVAL, testData)
	end
	
	if Button(Rect(100, 500, 150, 80), 'lua BroadcastMsg3') then
		local testData = CS.ArenaPanelData()
        testData.rank = 7777;
		messenger.broadcast(CS.MessageName.MN_ARENA_UPDATE, testData)
	end

	if Button(Rect(100, 600, 150, 80), 'lua BroadcastMsg4') then
		messenger.broadcast(CS.MessageName.MN_ARENA_BOX, 3)
	end
	self:OnGUI()
end)
--]]

-- 列表遍历示例
xlua.hotfix(CS.UIArena, 'UpdateRivalInfo', function(self, rivalList)
	print('HOTFIX:UpdateRivalInfo ', self, rivalList, (rivalList == nil) and "nil" or rivalList.Count)
	if rivalList == nil then
		do return end
	end
	
	-- 注意此处的列表遍历用法
	for i, rivalData in helper.list_ipairs(rivalList) do
		-- lua没有continue语句
		if rivalData ~= nil and i < self.m_rivalList.Length then
			self.m_rivalList[i]:SetData(rivalData, self.m_panelData)
		end
	end
    self.m_rivalGrid:Reposition()
end)

-- 字典使用、创建对象、UI组件初始化示例
xlua.hotfix(CS.UIArena, 'InitGo', function(self)
	print('HOTFIX:InitGo ', self)
	
	-- 说明：频繁使用的变量使用缓存，可以提高效率
	local goDict = self.goDict
    self.m_barBgSpt = helper.try_get_value(goDict, 'barBgSpt'):GetComponent('UISprite')
    self.m_barSpt = helper.try_get_value(goDict, 'barSpt'):GetComponent('UISprite')
    self.m_myRank = helper.try_get_value(goDict, 'myRank')
    self.m_rivalGrid = helper.try_get_value(goDict, 'rivalGrid'):GetComponent('UIGrid')
    self.m_awardGrid = helper.try_get_value(goDict, 'awardGrid'):GetComponent('UIGrid')
    self.redPointGo = helper.try_get_value(goDict, 'redPoint')
    self.shopRedPoint = helper.try_get_value(goDict, 'shopRedPoint')

	-- 说明：创建数组
    self.boxArr1 = helper.new_array(typeof(CS.UnityEngine.GameObject), 3);
    self.boxArr2 = helper.new_array(typeof(CS.UnityEngine.GameObject), 3);
    self.boxTipArr = helper.new_array(typeof(CS.UnityEngine.GameObject), 3);
    for i = 1, self.boxArr1.Length do
        self.boxArr1[i - 1] = helper.try_get_value(goDict, 'box' .. i .. 'Btn')
        self.boxArr2[i - 1] = helper.try_get_value(goDict, 'box' .. i .. 'Btn2')
        self.boxTipArr[i - 1] = helper.try_get_value(goDict, 'box' .. i .. 'BtnTip')
	end

    for i = 0, self.rankValueType.Length - 1 do
        self.rankValueType[i] = helper.try_get_value(goDict, 'rankValueType' .. tostring(i + 1))
        self.rankValueType[i]:SetActive(false)
	end
end)

-- 扩展方法示例
xlua.hotfix(CS.UIArena, 'InitPrefab', function(self)
	print('HOTFIX:InitPrefab ', self)
	
	-- 说明：静态函数调用使用'.'，成员函数调用使用':'
	local iconPrefab = CS.ResourceMgr.instance:LoadUIPrefab(CS.TheGameIds.PLAYER_ICON_ITEM)
	if iconPrefab ~= nil then
		-- 注意：对于扩展方法，必须使用成员函数方式调用，不能在cs侧那样使用静态函数调用
		local iconGo = self.m_myRank:AddChild(iconPrefab)--正确
		--local iconGo = CS.NGUITools.AddChild(self.m_myRank, iconPrefab)--错误
		if iconGo ~= null then
			iconGo.transform.localPosition = Vector3(-128, 0, 0)
			iconGo.transform.localScale = Vector3.one
			-- 注意：此处AddMissingComponent扩展方法实际上调用的是CS.XLuaHelper下的AddMissingComponent方法
			self.m_userIconItem = iconGo:AddMissingComponent(typeof(CS.UserIconItem))
		end
	end
	
	local rivalPrefab = CS.ResourceMgr.instance:LoadUIPrefab(CS.TheGameIds.ARENA_RIVAL_ITEM)
	if rivalPrefab ~= null then
		for i = 0, self.m_rivalList.Length - 1 do
			local go = self.m_rivalGrid.gameObject:AddChild(rivalPrefab)
			if go ~= nil then
				self.m_rivalList[i] = go:AddComponent(typeof(CS.ArenaRivalItem))
			end
		end
	end
end)

-- 枚举使用示例
xlua.hotfix(CS.UIArena, 'ClearAwardItemList', function(self)
	print('HOTFIX:ClearAwardItemList ', self)
	
	for i, item in helper.list_ipairs(self.m_awardItemList) do
		if item ~= nil then
			CS.UIGameObjectPool.instance:RecycleGameObject(CS.ResourceMgr.RESTYPE.UI, item.objThis, CS.TheGameIds.UI_BAG_ITEM_ICON)
		end
	end
	self.m_awardItemList:Clear()
end)

-- switch-case转if-else示例
xlua.hotfix(CS.UIArena, 'NguiOnClick', function(self, go)
	print('HOTFIX:NguiOnClick ', self, go)
	
	self:UIArena_BaseNguiOnClick(go)
	local goName = go.name
	if goName == 'leftTimeBtn' then
		self:ClickOnLeftTimeBtn()
	elseif goName == 'soldierBtn' then
		self:ClickOnSoldierBtn()
	elseif goName == 'shopBtn' then
		self:ClickOnShopBtn()
	elseif goName == 'resetBtn' then
		self:ClickOnResetBtn()
	elseif goName == 'box1Btn' then
		self:ClickOnBox1Btn()
	elseif goName == 'box2Btn' then
		self:ClickOnBox2Btn()
	elseif goName == 'box3Btn' then
		self:ClickOnBox3Btn()
	end
end)

-- 回调热更示例（消息系统的回调除外）
--	1、缓存委托
--  2、Lua绑定（实际上是创建LuaFunction再cast到delegate），需要在委托类型上打[CSharpCallLua]标签--推荐
--	3、使用反射再执行Lua绑定
xlua.hotfix(CS.UIArena, 'UpdateDailyAwardItem', function(self, itemList)
	print('HOTFIX:UpdateDailyAwardItem ', self, itemList)
	
	if itemList == nil then
		do return end
	end
	
	for i, item in helper.list_ipairs(itemList) do
		-- 方式一：使用CS侧缓存委托
		local callback1 = self.onBagItemLoad
		-- 方式二：Lua绑定
		local callback2 = util.bind(function(self, gameObject, object)
			self:OnBagItemLoad(gameObject, object)
		end, self)
		-- 方式三：
		--	1、使用反射创建委托---这里没法直接使用，返回的是Callback<,>类型，没法隐式转换到CS.GameObjectPool.GetGameObjectDelegate类型
		--	2、再执行Lua绑定--需要在委托类型上打[CSharpCallLua]标签
		-- 注意：
		--	1、使用反射创建的委托可以直接在Lua中调用，但作为参数时，必须要求参数类型一致，或者参数类型为Delegate--参考Lua侧消息系统实现
		--	2、正因为存在类型转换问题，而CS侧的委托类型在Lua中没法拿到，所以在Lua侧执行类型转换成为了不可能，上面才使用了Lua绑定
		--	3、对于Lua侧没法执行类型转换的问题，可以在CS侧去做，这就是[CSharpCallLua]标签的作用，xlua底层已经为我们做好这一步
		--	4、所以，这里相当于方式二多包装了一层委托，从这里可以知道，委托做好全部打[CSharpCallLua]标签，否则更新起来很受限
		--	5、对于Callback和Action类型的委托（包括泛型）都在CS.XLuaHelper实现了反射类型创建，所以不需要依赖Lua绑定，可以任意使用
		-- 静态函数测试
		local delegate = helper.new_callback(typeof(CS.UIArena), 'OnBagItemLoad2', typeof(CS.UnityEngine.GameObject), typeof(CS.System.Object))
		delegate(self.gameObject, nil)
		-- 成员函数测试
		local delegate = helper.new_callback(self, 'OnBagItemLoad', typeof(CS.UnityEngine.GameObject), typeof(CS.System.Object))
		local callback3 = util.bind(function(self, gameObject, object)
			delegate(gameObject, object)
		end, self)
		
		-- 其它测试：使用Lua绑定添加委托：必须[CSharpCallLua]导出委托类型，否则不可用
		callback5 = callback1 + util.bind(function(self, gameObject, object)
			print('callback4 in lua', self, gameObject, object)
		end, self)
		
		local callbackInfo = CS.GameObjectPool.CallbackInfo(callback3, item, Vector3.zero, Vector3.one * 0.65, self.m_awardGrid.gameObject)
		CS.UIGameObjectPool.instance:GetGameObject(CS.ResourceMgr.RESTYPE.UI, CS.TheGameIds.UI_BAG_ITEM_ICON, callbackInfo)
	end
	self.m_awardGrid:Reposition()
end)
